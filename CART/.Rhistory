x<-1
class(x)
x<-"hello"
class(x)
x<-1:25
x
x<-1:100
x
class(x)
x[24]
x<-c(1,2,3)
x
x<- rbind(c(1,2,3),c(2,3,4))
x
x<- cbind(c(1,2,3),c(2,3,4))
x
class(x)
x<-c(1,"hello",TRUE)
class(x)
m<-matrix(1:100,nrow=2)
m
m<-matrix(1:100,nrow=10)
m
m<-matrix(1:100,nrow=10, ncol=10)
m
m[7,6]
x<- 2+3
x
2+3
x<-57
y<-32
x+y
x-y
func<-function(x+y)
?function
Vector
List
Matrix
Dataframe
a<-function(x,y,z){x+y/z}
a(1,2,3)
a(x=2,y=3,z=7)
a<-function(x,y,z){x+y/z, x-y/z}
a<-function(x,y,z){c((x+y/z), (x-y/z))}
a(x=2,y=3,z=7)
x <- 1
x
x <- 1:100
x
a<- 10
b<-20
a+b
class(x)
y<- "hello"
y
class(y)
x<- c(1,2,3)
x
x <- list("x", 1, TRUE)
x
x <- matrix(1:100, nrows=10, ncol=10)
x <- matrix(1:100, nrow=10, ncol=10)
x
x[6,5]
x <- c(1,2,3)
y<- c(10,11,12)
rbind(x,y)
cbind(x,y)
func <- function(x,y,z){ x+y/z }
func(2,5,7)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
libraru(ROAuth)
library(ROAuth)
cred <- OAuthFactory$new(consumerKey="ntsLZHOkBmmr55v7wQBo6g",
consumerSecret="41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake()
?handshake()
cred$handshake()
library(twitter)
library(twitteR)
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(cred)
jhsTweets <- userTimeline('iJeevana')
library(twitteR)
jhsTweets <- userTimeline('iJeevana')
install.packages(c("KernSmooth", "MASS", "Matrix", "XML"))
consumerkey <- "ntsLZHOkBmmr55v7wQBo6g"
consumerSecret <- "41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw"
cred = getTwitterOAuth(consumerKey, consumerSecret)
tweet("tweeting from R!")
library(tm)
install.packages("tm")
tweet("tweeting from R!")
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
tweet("tweeting from R!")
tweet("now i have my own twitter app.. can analyse and tweet from #R console!! #superexcited")
tweet("now i have my own twitter app.. can tweet from #R console!! #superexcited")
tweet("Whole lot of tweets to analyse! #R #twitteR #DataAnalysis")
cranTweets <- userTimeline('cranatic')
cranTweets[1:5]
jhsTweets <- userTimeline('iJeevana')
jhsTweets[1:5]
userTimeline['tarlesubba']
userTimeline('tarlesubba')
searchTwitter('R', n=50)
userTimeline('igyaan')
library(twitteR)
userTimeline('igyaan')
library(ROAuth)
library(RCurl)
cred <- OAuthFactory$new(consumerKey="ntsLZHOkBmmr55v7wQBo6g",
consumerSecret="41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
registerTwitterOAuth(cred)
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
userTimeline('igyaan')
revo()
install.packages("knitr")
library(knitr)
cls
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ontoCAT)
library(OntoCAT)
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
which r
which R
library(ontoCAT)
library(rJAVA)
library(rJava)
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
biocLite(c("ontoCAT"))
library("biocLite")
biocLite
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("ontoCAT"))
library("ontoCAT")
??ontoCAT
getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
getAllTerms(TO)
getAllTermChildrenById(TO,"TO_0000493")
getAllTermChildrenById(TO,"plant height")
getAllTermChildrenById(TO,"plant")
getTermNameById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
searchTerm(TO,"plant height")
getRoots(TO)
showPathsToTermById(TO,"TO_0000493")
img<-showPathsToTermById(TO,"TO_0000493")
img
go <- getOntology("http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology_ext.obo")
library(rJava)
options(java.parameters=-Xmx512"")
options("java.parameters=-Xmx512")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
showPathsToTermById(TO,"TO_0000493")
img<-showPathsToTermById(TO,"TO_0000493")
options("java.parameters=-Xmx1024")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
options("java.parameters=-Xmx1024")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
getAllTerms(go)
showPathsToTermById(go,"GO_0050172")
showPathsToTermById(TO,"TO_0000493")
getRoots(TO)
library(shiny)
require(shinysky)
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
source("C:\Users\jhs\Documents\GitHub\ShinySky\R\jstree.R")
source("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\R\\jstree.R")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
source("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\R\\hotable.R")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
?jstree
??jstree
shiny:::flushReact()
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
library(shiny)
runApp("C:\\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
runApp("C:\\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
runApp("C:\\Users\\jhs\\Downloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator", "rstudio")
library("devtools", lib.loc="C:/Users/jhs/Documents/R/win-library/3.0")
devtools::install_github("shiny-incubator", "rstudio")
library(devtools)
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator","rstudio")
library("ontoCAT")
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
showPathsToTermById(TO,"TO_0000493")
getAllTerms(TO)
getAllTermChildrenById(TO,"TO_0000493")
getTermNameById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
showPathsToTermById(TO,"TO_0000493")
getTermAndAllChildrenById(TO,"TO_0000493")
showPathsToTermById(TO,"TO_0000493")
getTermRelationsById(TO,"TO_0000493")
getTermRelationsById(TO,"TO_0000493",relation="related to")
getTermRelationsById(TO,"TO_0000493",relation="synonym")
library(tm)
library(wordcloud)
install.packages("wordcloud")
library("RColorBrewer", lib.loc="C:/Users/jhs/Documents/R/win-library/3.0")
library(wordcloud)
read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE)
read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE, sep="\t")
file<-read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE, sep="\t")
col1<-file[,1]
col1
source('C:/Users/jhs/Desktop/spotfire_R_wordcloud.R')
View(img)
image<-wordcloud(d1$word,d1$freq, scale=c(8,.2),min.freq=3,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
image<-wordcloud(d1$word,d1$freq, scale=c(8,.2),min.freq=1,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
?digest
??digest
install.packages("digest")
library(digest)
?digest
library(devtools)
install_github("trestletech/shinyTree")
library(shiny)
runApp(system.file("examples/06-search", package="shinyTree"))
runApp(system.file("examples/07-drag-and-drop", package="shinyTree"))
runApp(system.file("examples/05-structure", package="shinyTree"))
runApp(system.file("examples/03-checkbox", package="shinyTree"))
runApp(system.file("examples/02-attributes", package="shinyTree"))
readRDS(file="C:\\Users\\jhs\\Desktop\\shinyTree-master\\inst\\examples\\06-search")
data<-readRDS(file="C:\\Users\\jhs\\Desktop\\shinyTree-master\\inst\\examples\\06-search\\texasCities.Rds")
View(data)
str(data)
library("ontoCAT")
install.packages("rJava")
library(rJava)
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY15\\GRT\\ontology\\trait.obo")
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(httr)
library(RJSONIO)
url1<-"http://ga.monsanto.com/rweb?Cpackage=monTestWebServices&Cfunction=echo"
res<-POST(url=url1, body=body, encode="json")
body<-list(test=list(isolateID="ABCDE", sequence=list(text="AGAGAG", quality="~12345")))
res<-POST(url=url1, body=body, encode="json")
res
content(res)
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts/Site+Name.json"
?POST
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts"
POST(url=url1,body="site name",encode="json")
POST(url=url1,body="site name+json")
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts/"
POST(url=url1,body="site name+json")
content(res)
res<-POST(url=url1,body="site name+json")
content(res)
res<-POST(url=url1,body="site+name+json")
content(res)
res<-POST(url=url1,body="site+name+json", encode="json")
content(res)
GET("http://httpbin.org/get")
content(GET("http://httpbin.org/get"))
r<-GET("http://httpbin.org/get")
content(r)
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
content(r)
content(r,"text")
server<-"http://stluonsprd01.monsanto.com/ses/"
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=site%20name"))
content
content(content)
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=site%20name"),encode="json")
content(content)
content
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=plant%20trait"),encode="json")
content(content)
install.packages(c("shinyFiles", "rmarkdown"))
devtools::install_github("trestletech/shinyAce")
devtools::install_github("swarm-lab/editR")
library(editR)
editR("C:/Users/jhs/Desktop/backup/file.Rmd")
library(shinyBS)
editR("C:/Users/jhs/Desktop/backup/file.Rmd")
library(mtcars)
library(datasets)
data(mtcars)
colnames(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636-209.21429
x
X
x
a<-c(2.0e+9,2.1e+9)
is.numeric(a)
a
as.factor(a)
b<-as.factor(a)
b
formatC(b,format="fg")
formatC(as.numeric(b),format="fg")
as.numeric(a)
print(a,digits=9)
print(a,digits=10)
print(a,digits=100)
print(a,digits=115)
print(a,digits=15)
e <- "1.6e-14"
class(c)
class(e)
as.numeric(e)
print(as.numeric(e),digits=5)
census <- read.csv("census.csv")
setwd("C:/Users/jhs/Desktop")
census <- read.csv("census.csv")
set.seed(2000)
split <- sample.split(census$over50k, SplitRatio = 0.6)
library(caTools)
split <- sample.split(census$over50k, SplitRatio = 0.6)
set.seed(2000)
split <- sample.split(census$over50k, SplitRatio = 0.6)
censusTrain <- subset(census, split==T)
censusTest <- subset(census, split==F)
str(censusTrain)
logModel <- glm(over50k ~ ., data = censusTrain, class="binomial")
logModel <- glm(over50k ~ ., data = censusTrain, method="binomial")
logModel <- glm(over50k ~ ., data = censusTrain, method="class")
str(censusTrain)
logModel <- glm(over50k ~ ., data = censusTrain, method="class")
logModel <- glm(over50k ~ ., data = censusTrain, family=binomial)
pred <- predict(logModel, newdata = censusTest, type = "class")
pred <- predict(logModel, newdata = censusTest, type = "response")
str(logModel)
summary(logModel)
pred <- predict(logModel, newdata = censusTest, type = "response")
table(censusTest$over50k,pred)
table(censusTest$over50k,pred > 0.5)
(9051+1888)/nrow(censusTest)
9051/nrow(censusTest)
(9051+662)/nrow(censusTest)
library(ROCR)
ROCRpred = prediction(predictTest, test$TenYearCHD)
ROCRpred = prediction(pred, censusTest$over50k)
as.numeric(performance(ROCRpred, "auc")@y.values)
library(rpart)
library(rpart.plot)
censusTree <- rpart(over50k ~ ., data=censusTrain, method="class")
prp(censusTree)
prp(censusTree)
predTree <- predict(censusTree, newdata = censusTest, type="class")
table(censusTest$over50k, predTree)
(9243+1596)/nrow(censusTest)
PredictROC = predict(predTree, newdata = censusTest)
PredictROC = predict(censusTree, newdata = censusTest)
PredictROC
pred = prediction(PredictROC[,2], censusTest$over50k)
perf = performance(pred, "tpr", "fpr")
plot(perf)
as.numeric(performance(pred, "auc")@y.values)
trainSmall = censusTrain[sample(nrow(censusTrain), 2000), ]
library(randomForest)
set.seed(1)
forest <- randomForest(over50k ~ ., data = trainSmall)
forestPred <- predict(forest, newdata = censusTest, type="class")
forestPred <- predict(forest, newdata = censusTest)
forestPred
table(censusTest$over50k, forestPred[2,])
table(censusTest$over50k, forestPred[,2])
pred = prediction(forestPred[,2], censusTest$over50k)
str(forestPred)
table(censusTest$over50k, as.matrix(forestPred[,2]))
as.matrix(forestPred)
table(censusTest$over50k, forestPred)
(9641+851)/nrow(censusTest)
vu = varUsed(forest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(MODEL$forest$xlevels[vusorted$ix]))
dotchart(vusorted$x, names(forest$forest$xlevels[vusorted$ix]))
varImpPlot(forest)
set.seed(1)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
library(caret)
library(e1071)
set.seed(2)
numFolds = trainControl( method = "cv", number = 10 )
set.seed(2)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k ~ ., data = censusTrain, method = "rpart", trControl = numFolds, tuneGrid = cartGrid)
censusTreeCV <- rpart(over50k ~ ., data=censusTest,cp=0.002)
table(censusTest$over50k,censusTreeCV)
censusTreeCV <- rpart(over50k ~ ., data=censusTest,method="class",cp=0.002)
table(censusTest$over50k,censusTreeCV)
censusTreeCV <- rpart(over50k ~ ., data=censusTrain,method="class",cp=0.002)
censusTreeCV <- rpart(over50k ~ ., data=censusTrain,cp=0.002)
predictCV <- predict(censusTreeCV, newdata=censusTest)
table(censusTest$over50k,predictCV)
table(censusTest$over50k,predictCV[,2])
predictCV <- predict(censusTreeCV, newdata=censusTest,type="class")
table(censusTest$over50k,predictCV)
(9178+1838)/nrow(censusTest)
prp(censusTreeCV)
