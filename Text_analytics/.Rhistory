predictCART <- predict(wikiCART,newdata = wikiTest, type = "response")
table(wikiTest$vandal,predictCART > 0.5)
predictCART <- predict(wikiCART,newdata = wikiTest, type = "class")
table(wikiTest$vandal,predictCART > 0.5)
predictCART <- predict(wikiCART,newdata = wikiTest, type = "response")
predictCART <- predict(wikiCART,newdata = wikiTest, type = "class")
table(wikiTest$vandal,predictCART )
(618+12)/nrow(wikiTest)
prp(wikiCART)
wikiWords2 <- wikiWords
wikiWords2$HTTP = ifelse(grepl("http",wiki$Added,fixed=TRUE), 1, 0)
table(wikiWords2$HTTP)
wikiTrain2 = subset(wikiWords2, split==TRUE)
wikiTest2 = subset(wikiWords2, split==FALSE)
wiki2CART <- rpart( vandal ~ ., data = wikiTrain2, method = "class")
predictCART2 <- predict(wiki2CART, newdata = wikiTest2, type = "class")
table(wikiTest2$vandal, predictCART2)
(609+57)/nrow(wikiTest2)
wikiWords2$NumWordsAdded = rowSums(as.matrix(dtmAdded))
wikiWords2$NumWordsRemoved = rowSums(as.matrix(dtmRemoved))
mean(wikiWords2$NumWordsAdded)
wiki2CART <- rpart( vandal ~ ., data = wikiTrain2, method = "class")
predictCART2 <- predict(wiki2CART, newdata = wikiTest2, type = "class")
table(wikiTest2$vandal, predictCART2)
(609+57)/nrow(wikiTest2)
str(wikiWords2)
wikiTrain2 = subset(wikiWords2, split==TRUE)
wikiTest2 = subset(wikiWords2, split==FALSE)
wiki2CART <- rpart( vandal ~ ., data = wikiTrain2, method = "class")
predictCART2 <- predict(wiki2CART, newdata = wikiTest2, type = "class")
table(wikiTest2$vandal, predictCART2)
(514+248)/nrow(wikiTest2)
wikiWords3 = wikiWords2
wikiWords3$Minor = wiki$Minor
wikiWords3$Loggedin = wiki$Loggedin
wikiTrain3 = subset(wikiWords3, split==TRUE)
wikiTest3 = subset(wikiWords3, split==FALSE)
wiki3CART <- rpart( vandal ~ ., data = wikiTrain3, method = "class")
predictCART3 <- predict(wiki3CART, newdata = wikiTest3, type = "class")
table(wikiTest3$vandal, predictCART3)
(595+241)/nrow(wikiTest3)
prp(wiki3CART)
trials <- read.csv("clinical_trial.csv", stringsAsFactors = F)
str(trials)
numchar <- nchar(trials$abstract)
summary(numchar)
nrao(trials[numchar==0,])
nrow(trials[numchar==0,])
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusAbstract = tm_map(corpusAbstract, removePunctuation)
corpusTitle = tm_map(corpusTitle, removeWords,stopwords("english"))
corpusAbstract = tm_map(corpusAbstract, removeWords,stopwords("english"))
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.995)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
length(stopwords("english"))
str(dtmTitle)
str(dtmAbstract)
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
#lower case
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
#convert to plain
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
#remove punctuation
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusAbstract = tm_map(corpusAbstract, removePunctuation)
#remove stop words
corpusTitle = tm_map(corpusTitle, removeWords,stopwords("english"))
corpusAbstract = tm_map(corpusAbstract, removeWords,stopwords("english"))
#stem
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
#build document matrix
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.995)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
length(stopwords("english"))
sparseTitle <- removeSparseTerms(dtmTitle,0.95)
sparseTitle <- removeSparseTerms(dtmTitle,0.95)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.95)
sparseTitle <- removeSparseTerms(dtmTitle,0.95)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.95)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusAbstract = tm_map(corpusAbstract, removePunctuation)
corpusTitle = tm_map(corpusTitle, removeWords,stopwords("english"))
corpusAbstract = tm_map(corpusAbstract, removeWords,stopwords("english"))
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmTitle <- DocumentTermMatrix(corpusTitle)
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusAbstract = tm_map(corpusAbstract, removePunctuation)
corpusTitle = tm_map(corpusTitle, removeWords,stopwords("english"))
corpusAbstract = tm_map(corpusAbstract, removeWords,stopwords("english"))
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.95)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.95)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.995)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
#lower case
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
#convert to plain
# corpusTitle = tm_map(corpusTitle, PlainTextDocument)
#
# corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
#remove punctuation
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusAbstract = tm_map(corpusAbstract, removePunctuation)
#remove stop words
corpusTitle = tm_map(corpusTitle, removeWords,stopwords("english"))
corpusAbstract = tm_map(corpusAbstract, removeWords,stopwords("english"))
#stem
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
#build document matrix
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.995)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
length(stopwords("english"))
trials <- read.csv("clinical_trial.csv", stringsAsFactors = F)
str(trials)
numchar <- nchar(trials$abstract)
summary(numchar)
nrow(trials[numchar==0,])
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
#lower case
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
#convert to plain
# corpusTitle = tm_map(corpusTitle, PlainTextDocument)
#
# corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
#remove punctuation
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusAbstract = tm_map(corpusAbstract, removePunctuation)
#remove stop words
corpusTitle = tm_map(corpusTitle, removeWords,stopwords("english"))
corpusAbstract = tm_map(corpusAbstract, removeWords,stopwords("english"))
#stem
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
#build document matrix
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.995)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
trials <- read.csv("clinical_trial.csv", stringsAsFactors = F)
str(trials)
numchar <- nchar(trials$abstract)
summary(numchar)
nrow(trials[numchar==0,])
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
#lower case
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
#convert to plain
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
#remove punctuation
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusAbstract = tm_map(corpusAbstract, removePunctuation)
#remove stop words
corpusTitle = tm_map(corpusTitle, removeWords,stopwords("english"))
corpusAbstract = tm_map(corpusAbstract, removeWords,stopwords("english"))
#stem
corpusTitle = tm_map(corpusTitle, stemDocument)
corpusAbstract = tm_map(corpusAbstract, stemDocument)
#build document matrix
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
sparseTitle <- removeSparseTerms(dtmTitle,0.995)
sparseAbstract <- removeSparseTerms(dtmAbstract,0.995)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
ncol(dtmTitle)
ncol(dtmAbstract)
length(stopwords("english"))
str(dtmTitle)
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
# Convert to lower case
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
# Remove punctuation
corpusTitle <- tm_map(corpusTitle, removePunctuation)
corpusAbstract <- tm_map(corpusAbstract, removePunctuation)
# Remove Stop words
corpusTitle <- tm_map(corpusTitle, removeWords, stopwords("english"))
corpusAbstract <- tm_map(corpusAbstract, removeWords, stopwords("english"))
# Stem the words
corpusTitle <- tm_map(corpusTitle, stemDocument)
corpusAbstract <- tm_map(corpusAbstract, stemDocument)
# Look at the first document
corpusTitle[[1]]
# Create matrix
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
dtmTitle
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
# Convert to lower case
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
# Remove punctuation
corpusTitle <- tm_map(corpusTitle, removePunctuation)
corpusAbstract <- tm_map(corpusAbstract, removePunctuation)
# Remove Stop words
corpusTitle <- tm_map(corpusTitle, removeWords, stopwords("english"))
corpusAbstract <- tm_map(corpusAbstract, removeWords, stopwords("english"))
# Stem the words
corpusTitle <- tm_map(corpusTitle, stemDocument)
corpusAbstract <- tm_map(corpusAbstract, stemDocument)
# Look at the first document
corpusTitle[[1]]
# Create matrix
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
#dtmTitle
#dtmAbstract
# Filter out sparse terms by keeping only terms that appear in at least 5% or more of the documents
dtmTitle <- removeSparseTerms(dtmTitle, 0.95)
dtmAbstract <- removeSparseTerms(dtmAbstract, 0.95)
dtmTitle
dtmAbstract
as.data.frame(as.matrix(dtmTitle))
corpusTitle = Corpus(VectorSource(trials$title))
corpusTitle = tm_map(corpusTitle, tolower)
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusTitle = tm_map(corpusTitle, removePunctuation)
corpusTitle = tm_map(corpusTitle, removeWords, stopwords("english"))
corpusTitle = tm_map(corpusTitle, stemDocument)
dtmTitle = DocumentTermMatrix(corpusTitle)
dtmTitle = removeSparseTerms(dtmTitle, 0.95)
dtmTitle = as.data.frame(as.matrix(dtmTitle))
str(dtmTitle)
trials <- read.csv("clinical_trial.csv", stringsAsFactors = F)
str(trials)
numchar <- nchar(trials$abstract)
summary(numchar)
nrow(trials[numchar==0,])
# Create Corpus
corpusTitle <- Corpus(VectorSource(trials$title))
corpusAbstract <- Corpus(VectorSource(trials$abstract))
# Convert to lower case
corpusTitle <- tm_map(corpusTitle, tolower)
corpusAbstract <- tm_map(corpusAbstract, tolower)
corpusTitle = tm_map(corpusTitle, PlainTextDocument)
corpusAbstract = tm_map(corpusAbstract, PlainTextDocument)
# Remove punctuation
corpusTitle <- tm_map(corpusTitle, removePunctuation)
corpusAbstract <- tm_map(corpusAbstract, removePunctuation)
# Remove Stop words
corpusTitle <- tm_map(corpusTitle, removeWords, stopwords("english"))
corpusAbstract <- tm_map(corpusAbstract, removeWords, stopwords("english"))
# Stem the words
corpusTitle <- tm_map(corpusTitle, stemDocument)
corpusAbstract <- tm_map(corpusAbstract, stemDocument)
# Look at the first document
corpusTitle[[1]]
# Create matrix
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
#dtmTitle
#dtmAbstract
# Filter out sparse terms by keeping only terms that appear in at least 5% or more of the documents
dtmTitle <- removeSparseTerms(dtmTitle, 0.95)
dtmAbstract <- removeSparseTerms(dtmAbstract, 0.95)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
colSums(dtmAbstract)
which.max(colSums(dtmAbstract))
x <- colSums(dtmAbstract)
x
View(x)
x
which.max(colSums(dtmAbstract))
colnames(dtmTitle) = paste0("T", colnames(dtmTitle))
colnames(dtmAbstract) = paste0("A", colnames(dtmAbstract))
dtm = cbind(dtmTitle, dtmAbstract)
colnames(dtmTitle) = paste0("T", colnames(dtmTitle))
colnames(dtmAbstract) = paste0("A", colnames(dtmAbstract))
dtm = cbind(dtmTitle, dtmAbstract)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
dtmTitle <- removeSparseTerms(dtmTitle, 0.95)
dtmTitle <- DocumentTermMatrix(corpusTitle)
dtmAbstract <- DocumentTermMatrix(corpusAbstract)
dtmTitle <- removeSparseTerms(dtmTitle, 0.95)
dtmAbstract <- removeSparseTerms(dtmAbstract, 0.95)
dtmTitle <- as.data.frame(as.matrix(dtmTitle))
dtmAbstract <- as.data.frame(as.matrix(dtmAbstract))
which.max(colSums(dtmAbstract))
colnames(dtmTitle) = paste0("T", colnames(dtmTitle))
colnames(dtmAbstract) = paste0("A", colnames(dtmAbstract))
dtm = cbind(dtmTitle, dtmAbstract)
dtm$trial <- trials$trial
set.seed(144)
spl <- sample.split(dtm$trial, SplitRatio = 0.7)
train <- subset(dtm, spl == T)
test <- subset(dtm, spl == F)
table(train$trial)[1] / sum(table(train$trial))
library(rpart)
library(rpart.plot)
trialsCART <- rpart(trial~., data=train, method="class")
prp(trialsCART)
predTrain <- predict(trialsCART)[,2]
t1 <- table(train$trial, predTrain >= 0.5)
(t1[1,1] + t1[2,2])/(sum(t1))
predTrain <- predict(trialsCART)[,2]
t1 <- table(train$trial, predTrain >= 0.5)
(t1[1,1] + t1[2,2])/(nrow(predTrain))
table(train$trial, predTrain >= 0.5)
(631+441)/(631+99+131+441)
table(train$trial, predTrain)
table(train$trial, predTrain >= 0.5)
(631+441)/(631+99+131+441)
summary(predTrain)
(631+441)/(631+99+131+441)
t1 <-table(train$trial, predTrain >= 0.5)
t1[2,2]/(t1[2,2] + t1[2,1])
t1[1,1]/(t1[1,1] + t1[1,2])
predTest <- predict(trialsCART, newdata = test)[,2]
t2 <- table(test$trial, predTest >= 0.5)
(t2[1,1] + t2[2,2])/(sum(t2))
library(ROCR)
predROCR = prediction(predTest[,2], test$trial)
predROCR = prediction(predTest[,2], test$trial)
predROCR = prediction(predTest, test$trial)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
performance(predROCR, "auc")@y.values
emails <- read.csv("emails.csv", stringsAsFactors = F)
str(emails)
sum(emails$spam == 1)
max(nchar(emails$text))
which.min(nchar(emails$text))
library(tm)
corpus <- Corpus(VectorSource(emails$text))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
corpus = tm_map(corpus, PlainTextDocument)
library(tm)
corpus <- Corpus(VectorSource(emails$text))
corpus <- tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
corpus <- tm_map(corpus, stemDocument)
dtm <- DocumentTermMatrix(corpus)
dtm
spdtm <- removeSparseTerms(dtm, 0.95)
spdtm
emailsSparse <- as.data.frame(as.matrix(spdtm)) # make.names is set to true to make the variable names of emailsSparse valid
colnames(emailsSparse) <- make.names(colnames(emailsSparse), unique=T)
dtm
spdtm
emailsSparse <- as.data.frame(as.matrix(spdtm)) # make.names is set to true to make the variable names of emailsSparse valid
colnames(emailsSparse) <- make.names(colnames(emailsSparse), unique=T)
which.max(colSums(emailsSparse))
emailsSparse$spam <- emails$spam
ham <- emailsSparse[emailsSparse$spam==0,]
sum(colSums(ham) >= 5000)
sum(colSums(spam) >= 1000)
spam <- emailsSparse[emailsSparse$spam==1,]
sum(colSums(spam) >= 1000)
spam <- emailsSparse[emailsSparse$spam==1,]
sum(colSums(spam) >= 1000)
sort(colSums(subset(emailsSparse, spam == 1)))
emailsSparse$spam <- as.factor(emailsSparse$spam)
library(caTools)
set.seed(123)
spl <- sample.split(emailsSparse$spam, SplitRatio = 0.7)
train <- subset(emailsSparse, spl == T)
test <- subset(emailsSparse, spl == F)
spamLog <- glm(spam~., data = train, family=binomial)
summary(spamLog)
predLog <- predict(spamLog, type="response")
sum(predLog < 0.00001)
sum(predLog > 0.99999)
sum(predLog > 0.00001 & predLog < 0.99999)
tLog <- table(train$spam, predLog >= 0.5)
(tLog[1,1] + tLog[2,2]) / sum(tLog)
summary(spamLog)
library(rpart)
library(rpart.plot)
spamCART <- rpart(spam~., data=train, method="class")
prp(spamCART)
predTrain <- predict(spamCART)[,2]
tCART <- table(train$spam, predTrain >= 0.5)
(tCART[1,1] + tCART[2,2])/(sum(tCART))
predTrain <- predict(spamCART)[,2]
tCART <- table(train$spam, predTrain >= 0.5)
(tCART[1,1] + tCART[2,2])/(sum(tCART))
tLog <- table(train$spam, predLog >= 0.5)
(tLog[1,1] + tLog[2,2]) / sum(tLog)
library(ROCR)
predROCR = prediction(predLog, train$spam)
perfROCR = performance(predROCR, "tpr", "fpr")
plot(perfROCR, colorize=TRUE)
performance(predROCR, "auc")@y.values
predTrain <- predict(spamCART)[,2]
tCART <- table(train$spam, predTrain >= 0.5)
(tCART[1,1] + tCART[2,2])/(sum(tCART))
predROCRCART = prediction(predTrain, train$spam)
perfROCRCART = performance(predROCRCART, "tpr", "fpr")
performance(predROCRCART, "auc")@y.values
library(randomForest)
set.seed(123)
spamRF <- randomForest(spam~., data=train, method="class")
predRF <- predict(spamRF, type="prob")[,2]
tRF <- table(train$spam, predRF >= 0.5)
(tRF[1,1] + tRF[2,2])/(sum(tRF))
predROCRRF = prediction(predRF, train$spam)
performance(predROCRRF, "auc")@y.values
predTestLog <- predict(spamLog, newdata = test, type="response")
t2 <- table(test$spam, predTestLog >= 0.5)
(t2[1,1] + t2[2,2])/(sum(t2))
library(ROCR)
performance(predROCRLog, "auc")@y.values
predROCRLog = prediction(predTestLog, test$spam)
performance(predROCRLog, "auc")@y.values
predTestCART <- predict(spamCART, newdata = test)[,2]
t3 <- table(test$spam, predTestCART >= 0.5)
(t3[1,1] + t3[2,2])/(sum(t3))
predROCRCART = prediction(predTestCART, test$spam)
performance(predROCRCART, "auc")@y.values
predTestRF <- predict(spamRF,newdata = test)
table(test$spam,predTestRF>0.5)
predTestRF <- predict(spamRF,newdata = test, type = "response")
table(test$spam,predTestRF > 0.5)
predTestRF <- predict(spamRF,newdata = test, type = "class")
table(test$spam,predTestRF > 0.5)
predTestRF <- predict(spamRF,newdata = test, type = "prob")
table(test$spam,predTestRF > 0.5)
