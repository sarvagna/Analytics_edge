eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
SimpleMod = glm(sold ~ startprice, data=eBayTrain, family=binomial)
PredTest = predict(SimpleMod, newdata=eBayTest, type="response")
MySubmission = data.frame(UniqueID = eBayTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionSimpleLog.csv", row.names=FALSE)
mean(PredTest)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
library(tm)
CorpusDescription = Corpus(VectorSource(c(eBayTrain$description, eBayTest$description)))
CorpusDescription = tm_map(CorpusDescription, content_transformer(tolower), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, PlainTextDocument, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removePunctuation, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removeWords, stopwords("english"), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, stemDocument, lazy=TRUE)
dtm = DocumentTermMatrix(CorpusDescription)
sparse = removeSparseTerms(dtm, 0.99)
DescriptionWords = as.data.frame(as.matrix(sparse))
colnames(DescriptionWords) = make.names(colnames(DescriptionWords))
DescriptionWordsTrain = head(DescriptionWords, nrow(eBayTrain))
DescriptionWordsTest = tail(DescriptionWords, nrow(eBayTest))
DescriptionWordsTrain$sold = eBayTrain$sold
DescriptionWordsTrain$WordCount = eBayTrain$WordCount
DescriptionWordsTest$WordCount = eBayTest$WordCount
DescriptionWordsLog = glm(sold ~ ., data=DescriptionWordsTrain, family=binomial)
PredTest = predict(DescriptionWordsLog, newdata=DescriptionWordsTest, type="response")
MySubmission = data.frame(UniqueID = eBayTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionDescriptionLog.csv", row.names=FALSE)
mean(PredTest)
library(ROCR)
View(eBayTest)
View(eBayTrain)
# We can't compute the accuracy or AUC on the test set ourselves, since we don't have the dependent variable on the test set (you can compute it on the training set though!).
nrow(DescriptionWords)
nrow(eBayTrain)
nrow(eBayTest)
summary(SimpleMod)
SimpleMod = glm(sold ~ ., data=eBayTrain, family=binomial)
summary(SimpleMod)
View(eBayTrain)
PredTest = predict(SimpleMod, newdata=eBayTest, type="response")
SimpleMod = glm(sold ~ . -description, data=eBayTrain, family=binomial)
summary(SimpleMod)
PredTest = predict(SimpleMod, newdata=eBayTest, type="response")
PredTest = predict(SimpleMod, newdata=eBayTest[,(-description)], type="response")
PredTest = predict(SimpleMod, newdata=eBayTest[,c(-description)], type="response")
eBayTest[,c(-description)]
eBayTest[,-c(description)]
eBayTest[,c(eBayTest(description))]
eBayTest[,c(eBayTest$description)]
eBayTest[,c(-eBayTest$description)]
eBayTest[,-eBayTest$description]
eBayTest
str(eBayTest)
eBayTest[,-1]
PredTest = predict(SimpleMod, newdata=eBayTest[,-1], type="response")
PredTest = predict(SimpleMod, newdata=eBayTest, type="response")
str(DescriptionWordsTrain)
str(eBayTrain)
eBayTrain$WordCount
a<- "a quick brown fox"
word.count(a)
??word.count
library(stringr)
str_count(a)
str_count(a,"\\S+")
a
eBayTrain$WordCount <- str_count(eBayTrain$description,"\\S+")
eBayTrain$WordCount
eBayTest$WordCount <- str_count(eBayTest$description,"\\S+")
DescriptionWordsTrain$sold = eBayTrain$sold
DescriptionWordsTrain$WordCount = eBayTrain$WordCount
DescriptionWordsTest$WordCount = eBayTest$WordCount
DescriptionWordsLog = glm(sold ~ ., data=DescriptionWordsTrain, family=binomial)
PredTest = predict(DescriptionWordsLog, newdata=DescriptionWordsTest, type="response")
eBayTrain$WordCount <- str_count(eBayTrain$description,"\\S+")
SimpleMod = glm(sold ~ . -description, data=eBayTrain, family=binomial)
summary(SimpleMod)
colbind
colbind()
colBind()
cbind()
cbind(DescriptionWordsTrain,eBayTrain[,-1])
x<-cbind(DescriptionWordsTrain,eBayTrain[,-1])
str(x)
str(DescriptionWordsTrain)
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTrain$WordCount <- str_count(eBayTrain$description,"\\S+")
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
eBayTest$WordCount <- str_count(eBayTest$description,"\\S+")
CorpusDescription = Corpus(VectorSource(c(eBayTrain$description, eBayTest$description)))
CorpusDescription = tm_map(CorpusDescription, content_transformer(tolower), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, PlainTextDocument, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removePunctuation, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removeWords, stopwords("english"), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, stemDocument, lazy=TRUE)
dtm = DocumentTermMatrix(CorpusDescription)
sparse = removeSparseTerms(dtm, 0.99)
DescriptionWords = as.data.frame(as.matrix(sparse))
colnames(DescriptionWords) = make.names(colnames(DescriptionWords))
DescriptionWordsTrain = head(DescriptionWords, nrow(eBayTrain))
DescriptionWordsTest = tail(DescriptionWords, nrow(eBayTest))
DescriptionWordsTrain$sold = eBayTrain$sold
DescriptionWordsTrain = head(DescriptionWords, nrow(eBayTrain))
str(DescriptionWordsTrain)
DescriptionWordsTest = tail(DescriptionWords, nrow(eBayTest))
Train <- cbind(DescriptionWordsTrain,eBayTrain[,-1])
Test <- cbind(DescriptionWordsTest,eBayTest[,-1])
DescriptionWordsLog = glm(sold ~ ., data=Train, family=binomial)
Train <- cbind(DescriptionWordsTrain,eBayTrain[,-1])
Test <- cbind(DescriptionWordsTest,eBayTest[,-1])
colnames(Train)
DescriptionWordsLog = glm(sold ~ ., data=Train, family=binomial)
eBayTrain$condition2 <- eBayTrain$condition
eBayTrain$condition <- NULL
str(eBayTrain)
eBayTest$condition2 <- eBayTest$condition
eBayTest$condition <- NULL
DescriptionWords = as.data.frame(as.matrix(sparse))
colnames(DescriptionWords) = make.names(colnames(DescriptionWords))
DescriptionWordsTrain = head(DescriptionWords, nrow(eBayTrain))
DescriptionWordsTest = tail(DescriptionWords, nrow(eBayTest))
Train <- cbind(DescriptionWordsTrain,eBayTrain[,-1])
Test <- cbind(DescriptionWordsTest,eBayTest[,-1])
DescriptionWordsLog = glm(sold ~ ., data=Train, family=binomial)
PredTest = predict(DescriptionWordsLog, newdata=Test, type="response")
MySubmission = data.frame(UniqueID = eBayTest$UniqueID, Probability1 = PredTest)
write.csv(MySubmission, "SubmissionDescriptionLog.csv", row.names=FALSE)
source('C:/Users/jhs/Desktop/backup/FY15/weather_forecast/weather_forecast.R')
library(randomForest)
eBayForest <- randomForest(sold ~ ., data=Train, ntree=200, nodesize=25)
setwd("C:/Users/jhs/Desktop/backup/FY15/data_fluency/analytics_edge/kaggle")
eBayTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
eBayTrain$WordCount <- str_count(eBayTrain$description,"\\S+")
eBayTrain$condition2 <- eBayTrain$condition
eBayTrain$condition <- NULL
eBayTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
eBayTest$WordCount <- str_count(eBayTest$description,"\\S+")
eBayTest$condition2 <- eBayTest$condition
eBayTest$condition <- NULL
library(tm)
CorpusDescription = Corpus(VectorSource(c(eBayTrain$description, eBayTest$description)))
CorpusDescription = tm_map(CorpusDescription, content_transformer(tolower), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, PlainTextDocument, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removePunctuation, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removeWords, stopwords("english"), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, stemDocument, lazy=TRUE)
dtm = DocumentTermMatrix(CorpusDescription)
sparse = removeSparseTerms(dtm, 0.97)
DescriptionWords = as.data.frame(as.matrix(sparse))
colnames(DescriptionWords) = make.names(colnames(DescriptionWords))
DescriptionWordsTrain = head(DescriptionWords, nrow(eBayTrain))
DescriptionWordsTest = tail(DescriptionWords, nrow(eBayTest))
Train <- cbind(DescriptionWordsTrain,eBayTrain[,-1])
Test <- cbind(DescriptionWordsTest,eBayTest[,-1])
eBayForest <- randomForest(sold ~ ., data=Train, ntree=200, nodesize=25)
DescriptionWordsLog = glm(sold ~ ., data=Train, family=binomial)
PredTest = predict(DescriptionWordsLog, newdata=Test, type="response")
eBayForest <- randomForest(sold ~ ., data=Train, ntree=200, nodesize=25)
View(Train)
str(Train)
Train$cellular <- as.factor(Train$cellular)
Train$carrier <- as.factor(Train$carrier)
Train$color <- as.factor(Train$color)
Train$storage <- as.factor(Train$storage)
Train$productline <- as.factor(Train$productline)
Train$condition2 <- as.factor(Train$condition2)
str(Train)
eBayForest <- randomForest(sold ~ ., data=Train, ntree=200, nodesize=25)
predictForest <- predict(eBayForest, newdata = Test)
Test$cellular <- as.factor(Test$cellular)
Test$carrier <- as.factor(Test$carrier)
Test$color <- as.factor(Test$color)
Test$storage <- as.factor(Test$storage)
Test$productline <- as.factor(Test$productline)
Test$condition2 <- as.factor(Test$condition2)
eBayForest <- randomForest(sold ~ ., data=Train, ntree=200, nodesize=25)
predictForest <- predict(eBayForest, newdata = Test)
predictForest <- predict(eBayForest, newdata = Test, type = class)
predictForest <- predict(eBayForest, newdata = Test, type = "class")
