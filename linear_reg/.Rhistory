x<-57
y<-32
x+y
x-y
func<-function(x+y)
?function
Vector
List
Matrix
Dataframe
a<-function(x,y,z){x+y/z}
a(1,2,3)
a(x=2,y=3,z=7)
a<-function(x,y,z){x+y/z, x-y/z}
a<-function(x,y,z){c((x+y/z), (x-y/z))}
a(x=2,y=3,z=7)
x <- 1
x
x <- 1:100
x
a<- 10
b<-20
a+b
class(x)
y<- "hello"
y
class(y)
x<- c(1,2,3)
x
x <- list("x", 1, TRUE)
x
x <- matrix(1:100, nrows=10, ncol=10)
x <- matrix(1:100, nrow=10, ncol=10)
x
x[6,5]
x <- c(1,2,3)
y<- c(10,11,12)
rbind(x,y)
cbind(x,y)
func <- function(x,y,z){ x+y/z }
func(2,5,7)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
libraru(ROAuth)
library(ROAuth)
cred <- OAuthFactory$new(consumerKey="ntsLZHOkBmmr55v7wQBo6g",
consumerSecret="41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake()
?handshake()
cred$handshake()
library(twitter)
library(twitteR)
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(cred)
jhsTweets <- userTimeline('iJeevana')
library(twitteR)
jhsTweets <- userTimeline('iJeevana')
install.packages(c("KernSmooth", "MASS", "Matrix", "XML"))
consumerkey <- "ntsLZHOkBmmr55v7wQBo6g"
consumerSecret <- "41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw"
cred = getTwitterOAuth(consumerKey, consumerSecret)
tweet("tweeting from R!")
library(tm)
install.packages("tm")
tweet("tweeting from R!")
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
tweet("tweeting from R!")
tweet("now i have my own twitter app.. can analyse and tweet from #R console!! #superexcited")
tweet("now i have my own twitter app.. can tweet from #R console!! #superexcited")
tweet("Whole lot of tweets to analyse! #R #twitteR #DataAnalysis")
cranTweets <- userTimeline('cranatic')
cranTweets[1:5]
jhsTweets <- userTimeline('iJeevana')
jhsTweets[1:5]
userTimeline['tarlesubba']
userTimeline('tarlesubba')
searchTwitter('R', n=50)
userTimeline('igyaan')
library(twitteR)
userTimeline('igyaan')
library(ROAuth)
library(RCurl)
cred <- OAuthFactory$new(consumerKey="ntsLZHOkBmmr55v7wQBo6g",
consumerSecret="41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
registerTwitterOAuth(cred)
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
userTimeline('igyaan')
revo()
install.packages("knitr")
library(knitr)
cls
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ontoCAT)
library(OntoCAT)
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
which r
which R
library(ontoCAT)
library(rJAVA)
library(rJava)
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
biocLite(c("ontoCAT"))
library("biocLite")
biocLite
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("ontoCAT"))
library("ontoCAT")
??ontoCAT
getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
getAllTerms(TO)
getAllTermChildrenById(TO,"TO_0000493")
getAllTermChildrenById(TO,"plant height")
getAllTermChildrenById(TO,"plant")
getTermNameById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
searchTerm(TO,"plant height")
getRoots(TO)
showPathsToTermById(TO,"TO_0000493")
img<-showPathsToTermById(TO,"TO_0000493")
img
go <- getOntology("http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology_ext.obo")
library(rJava)
options(java.parameters=-Xmx512"")
options("java.parameters=-Xmx512")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
showPathsToTermById(TO,"TO_0000493")
img<-showPathsToTermById(TO,"TO_0000493")
options("java.parameters=-Xmx1024")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
options("java.parameters=-Xmx1024")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
getAllTerms(go)
showPathsToTermById(go,"GO_0050172")
showPathsToTermById(TO,"TO_0000493")
getRoots(TO)
library(shiny)
require(shinysky)
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
source("C:\Users\jhs\Documents\GitHub\ShinySky\R\jstree.R")
source("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\R\\jstree.R")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
source("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\R\\hotable.R")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
?jstree
??jstree
shiny:::flushReact()
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
library(shiny)
runApp("C:\\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
runApp("C:\\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
runApp("C:\\Users\\jhs\\Downloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator", "rstudio")
library("devtools", lib.loc="C:/Users/jhs/Documents/R/win-library/3.0")
devtools::install_github("shiny-incubator", "rstudio")
library(devtools)
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator","rstudio")
library("ontoCAT")
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
showPathsToTermById(TO,"TO_0000493")
getAllTerms(TO)
getAllTermChildrenById(TO,"TO_0000493")
getTermNameById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
showPathsToTermById(TO,"TO_0000493")
getTermAndAllChildrenById(TO,"TO_0000493")
showPathsToTermById(TO,"TO_0000493")
getTermRelationsById(TO,"TO_0000493")
getTermRelationsById(TO,"TO_0000493",relation="related to")
getTermRelationsById(TO,"TO_0000493",relation="synonym")
library(tm)
library(wordcloud)
install.packages("wordcloud")
library("RColorBrewer", lib.loc="C:/Users/jhs/Documents/R/win-library/3.0")
library(wordcloud)
read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE)
read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE, sep="\t")
file<-read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE, sep="\t")
col1<-file[,1]
col1
source('C:/Users/jhs/Desktop/spotfire_R_wordcloud.R')
View(img)
image<-wordcloud(d1$word,d1$freq, scale=c(8,.2),min.freq=3,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
image<-wordcloud(d1$word,d1$freq, scale=c(8,.2),min.freq=1,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
?digest
??digest
install.packages("digest")
library(digest)
?digest
library(devtools)
install_github("trestletech/shinyTree")
library(shiny)
runApp(system.file("examples/06-search", package="shinyTree"))
runApp(system.file("examples/07-drag-and-drop", package="shinyTree"))
runApp(system.file("examples/05-structure", package="shinyTree"))
runApp(system.file("examples/03-checkbox", package="shinyTree"))
runApp(system.file("examples/02-attributes", package="shinyTree"))
readRDS(file="C:\\Users\\jhs\\Desktop\\shinyTree-master\\inst\\examples\\06-search")
data<-readRDS(file="C:\\Users\\jhs\\Desktop\\shinyTree-master\\inst\\examples\\06-search\\texasCities.Rds")
View(data)
str(data)
library("ontoCAT")
install.packages("rJava")
library(rJava)
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY15\\GRT\\ontology\\trait.obo")
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(httr)
library(RJSONIO)
url1<-"http://ga.monsanto.com/rweb?Cpackage=monTestWebServices&Cfunction=echo"
res<-POST(url=url1, body=body, encode="json")
body<-list(test=list(isolateID="ABCDE", sequence=list(text="AGAGAG", quality="~12345")))
res<-POST(url=url1, body=body, encode="json")
res
content(res)
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts/Site+Name.json"
?POST
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts"
POST(url=url1,body="site name",encode="json")
POST(url=url1,body="site name+json")
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts/"
POST(url=url1,body="site name+json")
content(res)
res<-POST(url=url1,body="site name+json")
content(res)
res<-POST(url=url1,body="site+name+json")
content(res)
res<-POST(url=url1,body="site+name+json", encode="json")
content(res)
GET("http://httpbin.org/get")
content(GET("http://httpbin.org/get"))
r<-GET("http://httpbin.org/get")
content(r)
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
content(r)
content(r,"text")
server<-"http://stluonsprd01.monsanto.com/ses/"
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=site%20name"))
content
content(content)
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=site%20name"),encode="json")
content(content)
content
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=plant%20trait"),encode="json")
content(content)
install.packages(c("shinyFiles", "rmarkdown"))
devtools::install_github("trestletech/shinyAce")
devtools::install_github("swarm-lab/editR")
library(editR)
editR("C:/Users/jhs/Desktop/backup/file.Rmd")
library(shinyBS)
editR("C:/Users/jhs/Desktop/backup/file.Rmd")
library(mtcars)
library(datasets)
data(mtcars)
colnames(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636-209.21429
x
X
x
source('C:/Users/jhs/Desktop/backup/FY15/weather_forecast/weather_forecast.R')
setwd("C:/Users/jhs/Desktop/backup/FY15/GRT/ontology/frameToD3-master")
setwd("C:/Users/jhs/Desktop/backup/FY15/GRT/ontology/frameToD3-master")
setwd("C:/Users/jhs/Desktop/backup/FY15/GRT/ontology/frameToD3-master")
po_list<-readRDS("po_list.Rds")
eo_list<-readRDS("eo_list.Rds")
x<-list(a=list("b","c"))
x
y<-list(b=list("c","d"))
z<-list(r=list(x,y))
z
r=list(x,y)
r
expression<-list(po_list,eo_list)
str(expression)
head(expression)
saveRDS(expression,file="exp_list.Rds")
str(x)
v = list(bob=c(2, 3, 5), john=c("aa", "bb"))
str(v)
list(x,y)
str(list(x,y))
str(a=list(x,y))
a=list(x,y)
str(a)
str(po_list)
View(po_list)
setwd("C:/Users/jhs/Desktop")
wine<-read.csv("wine.csv")
str(wine)
model1 <- lm(Price = WinterRain + HarvestRain, data=wine)
model1 <- lm(Price ~ WinterRain + HarvestRain, data=wine)
sumary(model1)
summary(model1)
cor(wine$WinterRain,wine$HarvestRain)
cor(wine$HarvestRain,wine$WinterRain)
baseball = read.csv("baseball.csv")
str(baseball)
RunsReg = lm(RS ~ OBP + SLG, data=moneyball)
moneyball = subset(baseball, Year < 2002)
RunsReg = lm(RS ~ OBP + SLG, data=moneyball)
summary(RunsReg)
WinsReg = lm(W ~ RD, data=moneyball)
moneyball$RD = moneyball$RS - moneyball$RA
WinsReg = lm(W ~ RD, data=moneyball)
summary(WinsReg)
summary(RunsReg)
=(0.311*2737.77)+(0.405*1584.91)
(0.311*2737.77)+(0.405*1584.91)
(0.311*2737.77)+(0.405*1584.91)-804.63
baseball
summary(moneyball)
runsA<-lm(RA ~ OOBP + OSLG, data = moneyball)
summary(runaA)
summary(runsA)
-837.38+(2913*0.297)+(0.370*1514.29)
summary(RunsReg)
(0.338*2737.77)+(0.540*1584.91)-804.63
(0.391*2737.77)+(0.450*1584.91)-804.63
(0.369*2737.77)+(0.374*1584.91)-804.63
(0.313*2737.77)+(0.447*1584.91)-804.63
(0.361*2737.77)+(0.361*1584.91)-804.63
(0.361*2737.77)+(0.5*1584.91)-804.63
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012=c(94,88,95,88,93,94,98,97,93,94)
wins2013=c(97,97,92,93,92,96,94,96,92,90)
cor(teamRank,wins2012)
cor(teamRank,wins2013)
climate<-read.csv("climate_change.csv")
str(climate)
climate_train<-subset(climate, Year > 2006)
str(climate_train)
climate_train<-subset(climate, Year < 2007)
str(climate_train)
climate_test<-subset(climate, Year > 2006)
str(climate_test)
model1<-lm(Temp ~ MEI + CO2 + CH4 + N20 + CFC.12 + TSI, data = climate_train)
model1<-lm(Temp ~ MEI + CO2 + CH4 + N20 + CFC.12 + TSI, data = climate_train)
model1<-lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.12 + TSI, data = climate_train)
summary(model1)
str(climate_test)
model1<-lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.12 + TSI + Aerosols, data = climate_train)
summary(model1)
model1<-lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data = climate_train)
summary(model1)
cor(climate_train)
model2<-lm(Temp ~ MEI + N2O + TSI + Aerosols, data = climate_train)
summary(model2)
stepModel2<-step(model2)
stepModel2<-step(model1)
stepModel1<-step(model1)
summary(stepModel1)
predictModel1<-predict(climate_test,stepModel1)
predictModel1<-predict(stepModel1,newdata = climate_test)
summary(predictModel1)
predictModel1
SSE<-sum((climate_train$Temp - predictModel1)^2)
SSE<-sum((climate_test$Temp - predictModel1)^2)
SST<-sum((climate_test$Temp - mean(climate_test$Temp))^2)
1- SSE/SST
SST<-sum((climate_test$Temp - mean(climate$Temp))^2)
1- SSE/SST
SST<-sum((climate_test$Temp - mean(climate_train$Temp))^2)
1- SSE/SST
pisaTrain<-read.csv("pisa2009train.csv")
pisaTest<-read.csv("pisa2009test.csv.csv")
pisaTest<-read.csv("pisa2009test.csv")
pisaTest<-read.csv("pisa2009test.csv.csv")
pisaTrain<-read.csv("pisa2009train.csv")
pisaTest<-read.csv("pisa2009test.csv")
str(pisaTrain)
tapply(pisaTrain,INDEX = pisaTrain$male,mean)
tapply(pisaTrain$readingScore,pisaTrain$male,mean)
sapply(pisaTrain,function(x) sum(is.na(x)))
nro(pisaTrain)
nrow(pisaTrain)
nrow(pisaTest)
pisaTrain<-na.omit(pisaTrain)
pisaTest<-na.omit(pisaTest)
nrow(pisaTrain)
nrow(pisaTest)
str(pisaTrain)
pisaTest$raceeth = relevel(pisaTest$raceeth,"White")
pisaTrain$raceeth = relevel(pisaTrain$raceeth,"White")
lmScore<-lm(readingSore ~ ., data=pisaTrain)
lmScore<-lm(readingScore ~ ., data=pisaTrain)
sumary(lmScore)
summary(lmScore)
predTest<-predict(lmScore,newdata = pisaTest)
summary(predTest)
637.7-353.2
SSE<-sum((pisaTest$readingScore - predTest)^2)
sqrt(SSE/nrow(pisaTest))
SSE
SST<-sum((pisaTest$readingScore - mean(pisaTrain$readingScore))^2)
SST
mean(pisaTrain$readingScore)
1- SSE/SST
FluTrain<-read.csv("FluTrain.csv")
str(FluTrain)
levels(factor(Week[which.max(ILI)]))
attach(FluTrain)
levels(factor(Week[which.max(ILI)]))
levels(factor(Week[which.max(Queries)]))
hist(FluTrain$ILI)
plot(log(FluTrain$ILI),FluTrain$Queries)
FluTrend1<-lm(log(ILI) ~ Queries, data = FluTrain)
summary(FluTrain)
summary(FluTrend1)
cor(log(FluTrain$ILI),FluTrain$Queries)
cor(log(FluTrain$ILI),FluTrain$Queries)^2
0.84^2
FLuTest<- read.csv("FluTest.csv")
PredTest1 = predict(FluTrend1, newdata=FluTest)
FluTest<- read.csv("FluTest.csv")
PredTest1 = predict(FluTrend1, newdata=FluTest)
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
str(PredTest1)
FluTest$Week
which(FluTest$Week)
which(FluTest$Week= "2012-03-11")
which(FluTest$Week, "2012-03-11")
FluTrend1[11]
PredTest1[11]
FluTest[11]
FluTest[11,3]
str(FluTest)
FluTest[11,2]
(2.293422-2.187378)/2.293422
SSE<-sum((PredTest1 - FluTest$ILI)^2)
RMSE <- sqrt(SSE/nrow(FluTest))
RMSE
install.packages("zoo")
library(zoo)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
FluTrain$ILILag2 = coredata(ILILag2)
sum(is.na(FluTrain$ILILag2))
plot(log(FluTrain$ILILag2),log(FluTrain$ILI))
FluTrend2<- lm(log(ILI) ~ Queries + log(ILILag2),data=FluTrain)
summary(FluTrend2)
ILILag2 = lag(zoo(FluTest$ILI), -2, na.pad=TRUE)
FluTest$ILILag2 = coredata(ILILag2)
sum(is.na(FluTest$ILILag2))
nrow(FluTrain)
FluTest$ILILag2[417] = FluTrain$ILI[2]
FluTest$ILILag2[2] = FluTrain$ILI[417]
FluTest$ILILag2[1] = FluTrain$ILI[416]
FluTest$ILILag2[1]
FluTest$ILILag2[2]
PredTest1 = exp(predict(FluTrend2, newdata=FluTest))
PredTest2 = exp(predict(FluTrend2, newdata=FluTest))
SSE<-sum((PredTest2 - FluTest$ILI)^2)
RMSE <- sqrt(SSE/nrow(FluTest))
RMSE
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
SSE<-sum((PredTest1 - FluTest$ILI)^2)
RMSE <- sqrt(SSE/nrow(FluTest))
RMSE
