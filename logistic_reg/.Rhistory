class(x)
m<-matrix(1:100,nrow=2)
m
m<-matrix(1:100,nrow=10)
m
m<-matrix(1:100,nrow=10, ncol=10)
m
m[7,6]
x<- 2+3
x
2+3
x<-57
y<-32
x+y
x-y
func<-function(x+y)
?function
Vector
List
Matrix
Dataframe
a<-function(x,y,z){x+y/z}
a(1,2,3)
a(x=2,y=3,z=7)
a<-function(x,y,z){x+y/z, x-y/z}
a<-function(x,y,z){c((x+y/z), (x-y/z))}
a(x=2,y=3,z=7)
x <- 1
x
x <- 1:100
x
a<- 10
b<-20
a+b
class(x)
y<- "hello"
y
class(y)
x<- c(1,2,3)
x
x <- list("x", 1, TRUE)
x
x <- matrix(1:100, nrows=10, ncol=10)
x <- matrix(1:100, nrow=10, ncol=10)
x
x[6,5]
x <- c(1,2,3)
y<- c(10,11,12)
rbind(x,y)
cbind(x,y)
func <- function(x,y,z){ x+y/z }
func(2,5,7)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv<-JDBC("oracle.jdbc.driver.OracleDriver", "//na1000camddev01/Drivers/ojdbc6.jar")
library(RJDBC)
libraru(ROAuth)
library(ROAuth)
cred <- OAuthFactory$new(consumerKey="ntsLZHOkBmmr55v7wQBo6g",
consumerSecret="41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
cred$handshake()
?handshake()
cred$handshake()
library(twitter)
library(twitteR)
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
registerTwitterOAuth(cred)
jhsTweets <- userTimeline('iJeevana')
library(twitteR)
jhsTweets <- userTimeline('iJeevana')
install.packages(c("KernSmooth", "MASS", "Matrix", "XML"))
consumerkey <- "ntsLZHOkBmmr55v7wQBo6g"
consumerSecret <- "41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw"
cred = getTwitterOAuth(consumerKey, consumerSecret)
tweet("tweeting from R!")
library(tm)
install.packages("tm")
tweet("tweeting from R!")
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
tweet("tweeting from R!")
tweet("now i have my own twitter app.. can analyse and tweet from #R console!! #superexcited")
tweet("now i have my own twitter app.. can tweet from #R console!! #superexcited")
tweet("Whole lot of tweets to analyse! #R #twitteR #DataAnalysis")
cranTweets <- userTimeline('cranatic')
cranTweets[1:5]
jhsTweets <- userTimeline('iJeevana')
jhsTweets[1:5]
userTimeline['tarlesubba']
userTimeline('tarlesubba')
searchTwitter('R', n=50)
userTimeline('igyaan')
library(twitteR)
userTimeline('igyaan')
library(ROAuth)
library(RCurl)
cred <- OAuthFactory$new(consumerKey="ntsLZHOkBmmr55v7wQBo6g",
consumerSecret="41tUEFLjnYYc4hOzResaOnv3Ix21YYluIaRtM9MwEGw",
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
registerTwitterOAuth(cred)
cred$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
userTimeline('igyaan')
revo()
install.packages("knitr")
library(knitr)
cls
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ontoCAT)
library(OntoCAT)
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
which r
which R
library(ontoCAT)
library(rJAVA)
library(rJava)
install.packages(pkgs="C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz")
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
library(ontoCAT)
install.packages("C:/Users/jhs/Downloads/ontoCAT_1.2.1.tar.gz", repos = NULL, type = "source")
biocLite(c("ontoCAT"))
library("biocLite")
biocLite
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("ontoCAT"))
library("ontoCAT")
??ontoCAT
getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
getAllTerms(TO)
getAllTermChildrenById(TO,"TO_0000493")
getAllTermChildrenById(TO,"plant height")
getAllTermChildrenById(TO,"plant")
getTermNameById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
searchTerm(TO,"plant height")
getRoots(TO)
showPathsToTermById(TO,"TO_0000493")
img<-showPathsToTermById(TO,"TO_0000493")
img
go <- getOntology("http://www.geneontology.org/ontology/obo_format_1_2/gene_ontology_ext.obo")
library(rJava)
options(java.parameters=-Xmx512"")
options("java.parameters=-Xmx512")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
showPathsToTermById(TO,"TO_0000493")
img<-showPathsToTermById(TO,"TO_0000493")
options("java.parameters=-Xmx1024")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
options("java.parameters=-Xmx1024")
.jinit()
.jcall(.jnew("java/lang/Runtime"), "J", "maxMemory")
getAllTerms(go)
showPathsToTermById(go,"GO_0050172")
showPathsToTermById(TO,"TO_0000493")
getRoots(TO)
library(shiny)
require(shinysky)
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
source("C:\Users\jhs\Documents\GitHub\ShinySky\R\jstree.R")
source("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\R\\jstree.R")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
source("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\R\\hotable.R")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
?jstree
??jstree
shiny:::flushReact()
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\\Users\\jhs\\Documents\\GitHub\\ShinySky\\inst\\examples")
runApp("C:\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
library(shiny)
runApp("C:\\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
runApp("C:\\Users\\jhs\\nmjDownloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
runApp("C:\\Users\\jhs\\Downloads\\shiny-incubator-master\\inst\\examples\\matrixinput")
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator", "rstudio")
library("devtools", lib.loc="C:/Users/jhs/Documents/R/win-library/3.0")
devtools::install_github("shiny-incubator", "rstudio")
library(devtools)
devtools::install_github("shiny-incubator", "rstudio")
devtools::install_github("shiny-incubator","rstudio")
library("ontoCAT")
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY14\\PhenomeDB\\trait_edited.obo")
showPathsToTermById(TO,"TO_0000493")
getAllTerms(TO)
getAllTermChildrenById(TO,"TO_0000493")
getTermNameById(TO,"TO_0000493")
showHierarchyDownToTermById(TO,"TO_0000493")
showPathsToTermById(TO,"TO_0000493")
getTermAndAllChildrenById(TO,"TO_0000493")
showPathsToTermById(TO,"TO_0000493")
getTermRelationsById(TO,"TO_0000493")
getTermRelationsById(TO,"TO_0000493",relation="related to")
getTermRelationsById(TO,"TO_0000493",relation="synonym")
library(tm)
library(wordcloud)
install.packages("wordcloud")
library("RColorBrewer", lib.loc="C:/Users/jhs/Documents/R/win-library/3.0")
library(wordcloud)
read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE)
read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE, sep="\t")
file<-read.table("C:\\Users\\jhs\\Desktop\\wordCloud.txt", header=FALSE, sep="\t")
col1<-file[,1]
col1
source('C:/Users/jhs/Desktop/spotfire_R_wordcloud.R')
View(img)
image<-wordcloud(d1$word,d1$freq, scale=c(8,.2),min.freq=3,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
image<-wordcloud(d1$word,d1$freq, scale=c(8,.2),min.freq=1,max.words=Inf, random.order=FALSE, rot.per=.15, colors=pal2)
?digest
??digest
install.packages("digest")
library(digest)
?digest
library(devtools)
install_github("trestletech/shinyTree")
library(shiny)
runApp(system.file("examples/06-search", package="shinyTree"))
runApp(system.file("examples/07-drag-and-drop", package="shinyTree"))
runApp(system.file("examples/05-structure", package="shinyTree"))
runApp(system.file("examples/03-checkbox", package="shinyTree"))
runApp(system.file("examples/02-attributes", package="shinyTree"))
readRDS(file="C:\\Users\\jhs\\Desktop\\shinyTree-master\\inst\\examples\\06-search")
data<-readRDS(file="C:\\Users\\jhs\\Desktop\\shinyTree-master\\inst\\examples\\06-search\\texasCities.Rds")
View(data)
str(data)
library("ontoCAT")
install.packages("rJava")
library(rJava)
TO <- getOntology(pathToURI="C:\\Users\\jhs\\Desktop\\backup\\FY15\\GRT\\ontology\\trait.obo")
library(rJava)
library(rJava)
library(rJava)
library(rJava)
library(httr)
library(RJSONIO)
url1<-"http://ga.monsanto.com/rweb?Cpackage=monTestWebServices&Cfunction=echo"
res<-POST(url=url1, body=body, encode="json")
body<-list(test=list(isolateID="ABCDE", sequence=list(text="AGAGAG", quality="~12345")))
res<-POST(url=url1, body=body, encode="json")
res
content(res)
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts/Site+Name.json"
?POST
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts"
POST(url=url1,body="site name",encode="json")
POST(url=url1,body="site name+json")
url1<-"http://stluonsprd01.monsanto.com/ses/MonsantoUberModel/concepts/"
POST(url=url1,body="site name+json")
content(res)
res<-POST(url=url1,body="site name+json")
content(res)
res<-POST(url=url1,body="site+name+json")
content(res)
res<-POST(url=url1,body="site+name+json", encode="json")
content(res)
GET("http://httpbin.org/get")
content(GET("http://httpbin.org/get"))
r<-GET("http://httpbin.org/get")
content(r)
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
content(r)
content(r,"text")
server<-"http://stluonsprd01.monsanto.com/ses/"
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=site%20name"))
content
content(content)
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=site%20name"),encode="json")
content(content)
content
content<-POST(paste0(server,"?TBDB=MonsantoUberModel&SERVICE=conceptmap&QUERY=plant%20trait"),encode="json")
content(content)
install.packages(c("shinyFiles", "rmarkdown"))
devtools::install_github("trestletech/shinyAce")
devtools::install_github("swarm-lab/editR")
library(editR)
editR("C:/Users/jhs/Desktop/backup/file.Rmd")
library(shinyBS)
editR("C:/Users/jhs/Desktop/backup/file.Rmd")
library(mtcars)
library(datasets)
data(mtcars)
colnames(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636-209.21429
x
X
x
a<-c(2.0e+9,2.1e+9)
is.numeric(a)
a
as.factor(a)
b<-as.factor(a)
b
formatC(b,format="fg")
formatC(as.numeric(b),format="fg")
as.numeric(a)
print(a,digits=9)
print(a,digits=10)
print(a,digits=100)
print(a,digits=115)
print(a,digits=15)
e <- "1.6e-14"
class(c)
class(e)
as.numeric(e)
print(as.numeric(e),digits=5)
setwd("C:/Users/jhs/Desktop")
songs<-read.csv("songs.csv")
SongsTrain<-subset(songs,year<=2009)
SongsTest<-subset(songs,year==2010)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
summary(SongsLog1)
cor(SongsTrain$loudness,SongsTrain$energy)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID", "loudness")
SongsTrainWEnergy<-SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrainWEnergy, family=binomial)
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
SongsLog2 = glm(Top10 ~ ., data=SongsTrainWEnergy, family=binomial)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID", "energy")
SongsTrainWloudness<-SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsLog3 = glm(Top10 ~ ., data=SongsTrainWloudness, family=binomial)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
SongsLog3 = glm(Top10 ~ . - energy, data=SongsTrain, family=binomial)
summary(SongsLog2)
summary(SongsLog1)
Summary(SongsLog3)
summary(SongsLog3)
predictTest = predict(SongsLog3, type="response", newdata=SongsTest)
table(SongsTest$Top10, predictTest > 0.45)
(309+5)/(309+5+40+19)
(40+19)/(309+5+40+19)
(309+19)/(309+5+40+19)
(309+19)/(309+5+40+19)
19/(19+40)
309/(309+5)
parole<- read.csv("parole.csv")
str(parole)
table(parole$violator)
parole$state<-as.factor(parole$state)
parole$crime<-as.factor(parole$crime)
str(parole)
summary(parole$crime)
summary(race)
summary(parole$race)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
str(parole)
model1<- glm(violator ~ .,data=parole,family=binomial)
sumary(model1)
summary(model1)
model1<- glm(violator ~ .,data=train,family=binomial)
summary(model1)
exp(1.61)
logit<--4.2411574+(0.3869904*1)+(-0.0001756*50)+(-0.1238867*3)+(0.0802954*12)+(1.61119919*0)+(0.6837143*1)
logit
exp(logit)
1/(1+exp(-logit))
predictTest = predict(model1, type="response", newdata=test)
table(test$violator, predictTest > 0.5)
sensitivity<-12/(23)
specificity<-167/(167+12)
sensitivity
specificity
accuracy<-(167+12)/(167+12+11+12)
accuracy
library(ROCR)
ROCRpred = prediction(test, test$violator)
ROCRpred = prediction(predictTest, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
24/178
summary(model1)
logit = -4.2411574+(0.3869904*1)+(0.8867192*1)+(-0.0001756*50)+(-0.1238867*3)+(0.0802954*12)+(1.61119919*0)+(0.6837143*1)
exp(logit)
1/(1+exp(-logit))
summary(predictTest)
loan<-read.csv("loans.csv")
str(loan)
table(loan$not.fully.paid)
1533/(1533+8045)
sapply(loan,function(x) sum(is.na(x)))
library(mice)
install.packages("mice")
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
vars.for.imputation = setdiff(names(loan), "not.fully.paid")
imputed = complete(mice(loan[vars.for.imputation]))
loan[vars.for.imputation] = imputed
loan_imputed<-read.csv("loans_imputed.csv")
summary(loan)
summary(loan_imputed)
loans<-loan_imputed
set.seed(144)
split = sample.split(loans$not.fully.paid, SplitRatio = 0.7)
loansTrain = subset(loans, split == TRUE)
loansTest = subset(loans, split == FALSE)
model1<- glm(not.fully.paid ~ .,data=loansTrain,family=binomial)
summary(model1)
-0.0009317*700
-0.0009317*710
(-0.0009317*710)-(-0.0009317*700)
(-0.0009317*700)-(-0.0009317*710)
logitA = -0.0009317*700
logitB = -0.0009317*710
logitA-logitB
exp(logitA)/exp(logitB)
logitA = -0.009317*700
logitB = -0.009317*710
logitA-logitB
exp(logitA)/exp(logitB)
logitA = 9.187+(-0.009317*700)
logitB = 9.187+(-0.009317*710)
logitA-logitB
exp(logitA)/exp(logitB)
predictTest = predict(model1, type="response", newdata=loansTest)
predicted.risk = predict(model1, type="response", newdata=loansTest)
summary(predicted.risk)
loansTest$predicted.risk <- predicted.risk
table(loansTest$not.fully.paid, predictTest > 0.5)
accuracy<- (2400+3)/(2400+13+457+3)
baseline_accuracy <- (2400+13)/(2400+13+457+3)
loansTest$predicted.risk <- predicted.risk
table(loansTest$not.fully.paid, predictTest > 0.5)
accuracy
baseline_accuracy
ROCRpred = prediction(predicted.risk, loansTest$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
model2<-glm(not.fully.paid ~ int.rate, data=loansTrain,family=binomial)
summary(model2)
summary(predict(model2,type="response",newdata=loansTest))
table(loansTest$not.fully.paid, predict2 > 0.5)
predict2<-predict(model2,type="response",newdata=loansTest)
table(loansTest$not.fully.paid, predict2 > 0.5)
model2<-glm(not.fully.paid ~ int.rate, data=loansTrain,family=binomial)
summary(model2)
predict2<-predict(model2,type="response",newdata=loansTest)
summary(predict2)
table(loansTest$not.fully.paid, predict2 > 0.5)
ROCRpred = prediction(predict2, loansTest$not.fully.paid)
as.numeric(performance(ROCRpred, "auc")@y.values)
1000*exp(6*10)
10*exp(0.06*10)
10*exp(0.06*3)
loansTest$profit = exp(test$int.rate*3) - 1
loansTest$profit = exp(loansTest$int.rate*3) - 1
loansTest$profit[loansTest$not.fully.paid == 1] = -1
summary(loansTest$profit)
0.8895*10
str(loansTest)
str(highInterest)
highInterest <- subset(loansTest,int.rate>=15)
str(highInterest)
highInterest <- subset(loansTest,int.rate>=0.15)
str(highInterest)
summary(highInterest$profit)
table(highInterest$not.fully.paid)
110/(327+110)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff
selectedLoans<-subset(highInterest,predicted.risk<=cutoff)
str(selectedLoans)
sum(selectedLoans$profit)
table(selectedLoans$not.fully.paid)
str(selectedLoans)
